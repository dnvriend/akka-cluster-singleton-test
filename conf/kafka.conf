# Copyright 2016 Dennis Vriend
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see: https://kafka.apache.org/documentation.html#newconsumerconfigs
kafka-test {
  # [consumer][producer]
  # A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. The client will make
  # use of all servers irrespective of which servers are specified here for bootstrapping—this list only impacts the
  # initial hosts used to discover the full set of servers
  #
  # default=[localhost:9092]
  bootstrap.servers = "localhost:9092,localhost:9092"

  # [consumer]
  # if true the consumer's offset will be periodically committed in the background.
  #
  # default=true
  enable.auto.commit = false

  # [consumer]
  # What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server
  # (e.g. because that data has been deleted):
  #
  # - earliest: automatically reset the offset to the earliest offset
  # - latest: automatically reset the offset to the latest offset
  # - none: throw exception to the consumer if no previous offset is found for the consumer's group
  # - anything else: throw exception to the consumer.
  #
  # default=latest
  # options=[latest, earliest, none]
  auto.offset.reset = "earliest"

  topics = ["test"]

  # [consumer]
  # A unique string that identifies the consumer group this consumer belongs to. This property is required if the consumer
  # uses either the group management functionality by using subscribe(topic) or the Kafka-based offset management strategy.
  #
  # each new consumer must get its own unique group.id name
  #
  group.id = "consumer1"

  # [consumer]
  # The maximum number of records returned in a single call to poll().
  #
  # minimum=1
  # defaults=500
  # max=Int
  max.poll.records=1

  # [consumer]
  # The maximum delay between invocations of poll() when using consumer group management. This places an upper bound on the amount of time that the consumer can be idle before fetching more records. If poll() is not called before expiration of this timeout, then the consumer is considered failed and the group will rebalance in order to reassign the partitions to another member.
  #
  # minimum=1
  # default=300000
  # max=Int
  max.poll.interval.ms=500

  schedule.interval = 500 milliseconds
  unconfirmed.timeout = 5000 milliseconds
  buffer.size = 8

  # [producer]
  # The number of acknowledgments the producer requires the leader to have received before considering a request complete.
  # This controls the durability of records that are sent. The following settings are allowed:
  #
  # acks=0
  # If set to zero then the producer will not wait for any acknowledgment from the server at all. The record will be
  # immediately added to the socket buffer and considered sent. No guarantee can be made that the server has received the
  # record in this case, and the retries configuration will not take effect (as the client won't generally know of any failures).
  # The offset given back for each record will always be set to -1.
  #
  # acks=1 This will mean the leader will write the record to its local log but will respond without awaiting full acknowledgement
  # from all followers. In this case should the leader fail immediately after acknowledging the record but before the followers have
  # replicated it then the record will be lost.
  #
  # acks=all This means the leader will wait for the full set of in-sync replicas to acknowledge the record. This guarantees that
  # the record will not be lost as long as at least one in-sync replica remains alive. This is the strongest available guarantee.
  # This is equivalent to the acks=-1 setting.
  acks = 1

  # [producer]
  # Setting a value greater than zero will cause the client to resend any record whose send fails with a potentially
  # transient error. Note that this retry is no different than if the client resent the record upon receiving the error.
  # Allowing retries without setting max.in.flight.requests.per.connection to 1 will potentially change the ordering
  # of records because if two batches are sent to a single partition, and the first fails and is retried but the second succeeds,
  # then the records in the second batch may appear first.
  retries = 0

  # [producer]
  # The producer will attempt to batch records together into fewer requests whenever multiple records are being sent to
  # the same partition. This helps performance on both the client and the server. This configuration controls the default
  # batch size in bytes. No attempt will be made to batch records larger than this size.
  #
  # Requests sent to brokers will contain multiple batches, one for each partition with data available to be sent.
  #
  # A small batch size will make batching less common and may reduce throughput (a batch size of zero will disable
  # batching entirely). A very large batch size may use memory a bit more wastefully as we will always allocate a
  # buffer of the specified batch size in anticipation of additional records.
  #
  # minimum=0
  # default=16384
  # max=Int
  batch.size = 16834

  # [producer]
  # The producer groups together any records that arrive in between request transmissions into a single batched request.
  # Normally this occurs only under load when records arrive faster than they can be sent out. However in some circumstances
  # the client may want to reduce the number of requests even under moderate load. This setting accomplishes this by adding a
  # small amount of artificial delay—that is, rather than immediately sending out a record the producer will wait for up to the
  # given delay to allow other records to be sent so that the sends can be batched together. This can be thought of as analogous
  # to Nagle's algorithm in TCP. This setting gives the upper bound on the delay for batching: once we get batch.size worth of
  # records for a partition it will be sent immediately regardless of this setting, however if we have fewer than this many bytes
  # accumulated for this partition we will 'linger' for the specified time waiting for more records to show up. This setting
  # defaults to 0 (i.e. no delay). Setting linger.ms=5, for example, would have the effect of reducing the number of requests
  # sent but would add up to 5ms of latency to records sent in the absense of load.
  #
  # minimum=0
  # default=0
  # max=Long
  linger.ms = 1

  # [producer]
  # The total bytes of memory the producer can use to buffer records waiting to be sent to the server. If records are sent
  # faster than they can be delivered to the server the producer will block for max.block.ms after which it will throw an exception.
  #
  # This setting should correspond roughly to the total memory the producer will use, but is not a hard bound since not all memory
  # the producer uses is used for buffering. Some additional memory will be used for compression (if compression is enabled)
  # as well as for maintaining in-flight requests.
  #
  # minimum=0
  # default=33554432
  # max=Long
  buffer.memory = 33554432
}

kafka-test-singleton {
  bootstrap.servers = "localhost:9092"

  enable.auto.commit = false

  auto.offset.reset = "earliest"
  topics = ["test"]

  group.id = "consumer2"
  max.poll.records=1
  max.poll.interval.ms=500
  schedule.interval = 500 milliseconds
  unconfirmed.timeout = 5000 milliseconds
  buffer.size = 8

  acks = 1
  retries = 0
  batch.size = 16834
  linger.ms = 1
  buffer.memory = 33554432

  singleton {
    singleton-name = "singleton-kafka-test"
    role = ""
    hand-over-retry-interval = 1s
    min-number-of-hand-over-retries = 10
  }

  singleton-proxy {
    singleton-name = ${kafka-test-singleton.singleton.singleton-name}
    role = ""
    singleton-identification-interval = 1s
    buffer-size = 10000
  }
}